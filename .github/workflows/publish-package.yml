name: Publish Package to npm

on:
  push:
    branches:
      - main
    paths:
      - "package/package.json"

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100 # Fetch last 100 commits to ensure we have enough history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          scope: "@planning-data"

      - name: Check version change
        id: version-check
        run: |
          # Get the latest release version using gh
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [ -z "$LATEST_RELEASE" ]; then
            echo "No previous release found, will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Remove the 'v' prefix from the release tag
          LATEST_VERSION=${LATEST_RELEASE#v}
          CURRENT_VERSION=$(cat package/package.json | grep '"version"' | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[:space:]')

          echo "Latest release version: $LATEST_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
            echo "Version unchanged from last release, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version changed from $LATEST_VERSION to $CURRENT_VERSION"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.version-check.outputs.should_publish == 'true'
        run: npm install

      - name: Run make package
        if: steps.version-check.outputs.should_publish == 'true'
        run: make package

      - name: Publish to npm
        if: steps.version-check.outputs.should_publish == 'true'
        run: cd package && npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create release
        if: steps.version-check.outputs.should_publish == 'true'
        run: |
          gh release create v${{ steps.version-check.outputs.current_version }} --generate-notes --latest
          gh release list
          gh release view v${{ steps.version-check.outputs.current_version }}
